<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technical on Russell Writes Code</title><link>/categories/technical/</link><description>Recent content in Technical on Russell Writes Code</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 Apr 2018 23:00:33 +0000</lastBuildDate><atom:link href="/categories/technical/index.xml" rel="self" type="application/rss+xml"/><item><title>New in C# 7.0: Part 4 - Expression-Bodied Members</title><link>/2018/04/new-in-c-7-0-part-4-expression-bodied-members/</link><pubDate>Sun, 01 Apr 2018 23:00:33 +0000</pubDate><guid>/2018/04/new-in-c-7-0-part-4-expression-bodied-members/</guid><description>This week, we&amp;rsquo;re discussing Expression-Bodied Members in C# 7.0. Now, this was an existing feature in C# 6.0, but it was limited to only methods, like so:
public void DoAThingCS6() =&amp;gt; Console.WriteLine(&amp;quot;This is a test&amp;quot;); With the new additions in C# 7.0, we can now do Constructors, Deconstructors, and Properties. A Constructor definition looks like this:
public SomeClass() =&amp;gt; DoAThing(); Similarly, a Deconstructor looks like this:
~SomeClass() =&amp;gt; DoAThing(); Finally, although auto-properties are shorter, you can write properties with specific implementations with this new shorthand:</description></item><item><title>New in C# 7.0: Part 3 – Ref Returns</title><link>/2018/03/new-in-c-7-0-part-3-ref-returns/</link><pubDate>Sun, 25 Mar 2018 23:00:10 +0000</pubDate><guid>/2018/03/new-in-c-7-0-part-3-ref-returns/</guid><description>Picking up where I left off last week, there&amp;rsquo;s another interesting new feature called &amp;ldquo;Ref Returns&amp;rdquo;. Similar to Ref Locals, this allows you to return a reference from a method, and then optionally use it as a Ref Local in the calling code.
Let&amp;rsquo;s look at the following method definition:
private static string[] strings = { &amp;quot;this&amp;quot;, &amp;quot;is&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;test&amp;quot; }; public static ref string GetSomeString(int number) { if (number &amp;lt; 0 || number &amp;gt;= strings.</description></item><item><title>New in C# 7.0: Part 2 – Ref Locals</title><link>/2018/03/new-in-c-7-0-part-2-ref-locals/</link><pubDate>Sun, 18 Mar 2018 23:22:39 +0000</pubDate><guid>/2018/03/new-in-c-7-0-part-2-ref-locals/</guid><description>After about a year, I&amp;rsquo;m finally trying to start writing some more blog posts, so I&amp;rsquo;ll pick up right where I left off. Today, I&amp;rsquo;m going to give a brief overview of Ref Locals.
Ref Locals allow you to create an alias for a variable so that you are not creating another copy of the data or reference (in the case of an object), in memory. In previous versions of C#, if you wanted to refer to a local variable with a different name, you&amp;rsquo;d have to do this:</description></item><item><title>New in C# 7.0: Part 1 - Out Variables</title><link>/2017/02/new-in-c-7-0-part-1-out-variables/</link><pubDate>Sat, 11 Feb 2017 13:00:09 +0000</pubDate><guid>/2017/02/new-in-c-7-0-part-1-out-variables/</guid><description>This is the first post in a series on the new features available in Visual Studio 2017 and C# 7.0. Today, I&amp;rsquo;m going to be talking about Out Variables.
One of the great new features is probably something you will use frequently, which is defining an out variable, and using that variable in the same statement. Currently, to use an out variable, one must do something like this:
DateTime dt; if (DateTime.</description></item><item><title>WCF: Logging All SOAP Messages</title><link>/2015/02/wcf-logging-all-soap-messages/</link><pubDate>Mon, 16 Feb 2015 00:18:55 +0000</pubDate><guid>/2015/02/wcf-logging-all-soap-messages/</guid><description>Do you want to know what is actually in that SOAP message that your Windows Communication Foundation service is sending? Well, look no further. It&amp;rsquo;s actually quite simple to output the XML that is being created.
First, there are a couple classes that need to be added to your service project (or a separate project). The first of these is perhaps the most important, which is the message inspector that is used to do the actual logging, etc.</description></item><item><title>Supporting iPhone 6/6 Plus Native Resolutions: The Basics</title><link>/2014/11/iphone-66-plus-native-resolutions/</link><pubDate>Sun, 09 Nov 2014 16:55:04 +0000</pubDate><guid>/2014/11/iphone-66-plus-native-resolutions/</guid><description>Ever since I got the new iPhone 6, I&amp;rsquo;ve been silently cursing the applications that haven&amp;rsquo;t yet properly updated their apps for the new screen sizes. The zoomed iPhone 5s display looks really terrible, folks! So, I&amp;rsquo;m going to give you a five minute tutorial to update your applications. Assuming, of course, that you updated your app last year for iOS 7. I&amp;rsquo;m also assuming that you have a reasonable understanding of how to navigate Xcode, so this post is a bit light on screenshots.</description></item><item><title>iOS 8: Notifications Changes</title><link>/2014/09/ios-8-notifications-changes/</link><pubDate>Mon, 29 Sep 2014 04:04:55 +0000</pubDate><guid>/2014/09/ios-8-notifications-changes/</guid><description>We&amp;rsquo;re updating our iOS application at work, and I came across some fun with iOS 8 and notifications. So, I thought I&amp;rsquo;d write a short post about it.
In iOS 7, we used the following method on the shared UIApplication instance to set up notifications:
[[UIApplication sharedApplication] registerForRemoteNotificationTypes:( UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound )]; In iOS 8, this doesn&amp;rsquo;t work. So now, it&amp;rsquo;s a multi-step process:
UIApplication *application = [UIApplication sharedApplication]; UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:(UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound) categories:nil]; [application registerUserNotificationSettings:settings]; [application registerForRemoteNotifications]; First, we get an instance of the shared UIApplication (this is obviously optional, but I think it makes the code easier to read).</description></item><item><title>GIT, Powershell, and Windows 8.1</title><link>/2014/05/git-powershell-and-windows-8-1/</link><pubDate>Sun, 18 May 2014 19:28:49 +0000</pubDate><guid>/2014/05/git-powershell-and-windows-8-1/</guid><description>This weekend I opted to upgrade(depending on your opinion) my laptop to Windows 8.1. Now that I have lost all credibility, I can move on to talk about my experience with using GIT on Windows 8.1, and the issue I had with my PowerShell profile script.
Like many users, I have a profile script set up in PowerShell so that when I open it, my main code directory is the working directory, and I also have a custom prompt set up to tell me the current folder&amp;rsquo;s GIT status.</description></item><item><title>Pattern of the Week: Builder</title><link>/2014/04/pattern-of-the-week-builder/</link><pubDate>Mon, 28 Apr 2014 04:01:57 +0000</pubDate><guid>/2014/04/pattern-of-the-week-builder/</guid><description>This post is part of a series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Creational
This week&amp;rsquo;s pattern is called the Builder pattern. The builder pattern is a common way to create an object, using methods and properties to set up exactly the kind of object you want, then calling a Build() method to actually create the object.</description></item><item><title>Pattern of the Week: Prototype</title><link>/2014/03/pattern-of-the-week-prototype/</link><pubDate>Thu, 13 Mar 2014 05:14:30 +0000</pubDate><guid>/2014/03/pattern-of-the-week-prototype/</guid><description>This is the seventh in a series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Creational
This week&amp;rsquo;s pattern is called the Prototype pattern. This pattern is used when you need to create exact copies of objects. Let&amp;rsquo;s look at our example Prototype class:
public class StreetSign { public StreetSign(string shape, string text) { Shape = shape; Text = text; } public string Text { get; private set; } public string Shape { get; private set; } public StreetSign Clone() { return new StreetSign(Shape, Text); } } This StreetSign class has two properties - Text and Shape, and a method called Clone.</description></item><item><title>Pattern of the Week: Proxy</title><link>/2014/03/pattern-of-the-week-proxy/</link><pubDate>Thu, 06 Mar 2014 05:03:57 +0000</pubDate><guid>/2014/03/pattern-of-the-week-proxy/</guid><description>This is the sixth in a series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Structural
This week&amp;rsquo;s pattern is called the Proxy pattern. This pattern is primarily used to add security or to implement caching for objects. For my example, I&amp;rsquo;ll be adding security to this class:
public class SomeService : ISomeService { public List&amp;lt;string&amp;gt; GetStrings() { return new List&amp;lt;string&amp;gt; { &amp;quot;String1&amp;quot;, &amp;quot;String2&amp;quot;, &amp;quot;String3&amp;quot; }; } } This is a pretty simple class, which implements the following interface:</description></item><item><title>Pattern of the Week: Abstract Factory</title><link>/2014/02/pattern-of-the-week-abstract-factory/</link><pubDate>Thu, 27 Feb 2014 04:42:16 +0000</pubDate><guid>/2014/02/pattern-of-the-week-abstract-factory/</guid><description>This is the fifth in a series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Creational
This week&amp;rsquo;s pattern is the Abstract Factory pattern. To explain this, we must first understand the factory class.
Factories create things, plain and simple. Whether we&amp;rsquo;re talking about software development or retail, that is what they do. Factory classes typically look something like this:</description></item><item><title>Pattern of the Week: Template Method</title><link>/2014/02/pattern-of-the-week-template-method/</link><pubDate>Wed, 19 Feb 2014 03:44:58 +0000</pubDate><guid>/2014/02/pattern-of-the-week-template-method/</guid><description>This is the fourth in a series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Behavioral
This week&amp;rsquo;s pattern is the Template Method pattern. This pattern allows you to define a set of algorithms that follow the same procedure, but that might have certain parts that differ. For this pattern, I&amp;rsquo;m borrowing heavily from my post on the Strategy Pattern, so if you haven&amp;rsquo;t read it yet, you should read that one first.</description></item><item><title>Pattern of the Week: Strategy</title><link>/2014/02/pattern-of-the-week-strategy/</link><pubDate>Thu, 13 Feb 2014 03:31:53 +0000</pubDate><guid>/2014/02/pattern-of-the-week-strategy/</guid><description>This is the third in a series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Behavioral
Difficulty: Beginner
This week&amp;rsquo;s pattern is the Strategy pattern. This pattern can be used when you have a set of similar algorithms. The easiest way to explain it is with an example, so let&amp;rsquo;s look at the following class:</description></item><item><title>Pattern of the Week: Decorator</title><link>/2014/02/pattern-of-the-week-decorator/</link><pubDate>Tue, 04 Feb 2014 02:13:46 +0000</pubDate><guid>/2014/02/pattern-of-the-week-decorator/</guid><description>This is the second in a (hopefully) long series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Structural
Difficulty: Beginner
This week&amp;rsquo;s &amp;ldquo;Pattern of the Week&amp;rdquo; is the Decorator pattern. To explain this pattern, I&amp;rsquo;m going to start with an explanation of the Open/Closed Principle. The Open/Closed Principle is one of the five &amp;ldquo;SOLID&amp;rdquo; principles outlined by Robert C.</description></item><item><title>Pattern of the Week: Singleton</title><link>/2014/01/pattern-of-the-week-singleton/</link><pubDate>Sat, 25 Jan 2014 20:58:34 +0000</pubDate><guid>/2014/01/pattern-of-the-week-singleton/</guid><description>This is the first in a (hopefully) long series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Creational
Difficulty: Beginner
Singleton. It is probably the least complicated of all design patterns, yet it can be confusing for beginners. In this post, I will attempt to explain exactly how to create a Singleton, talk about common implementation problems, and provide some sample code so you can see it in action.</description></item></channel></rss>