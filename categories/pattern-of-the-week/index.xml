<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pattern of the Week on Russell Writes Code</title><link>/categories/pattern-of-the-week/</link><description>Recent content in Pattern of the Week on Russell Writes Code</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 28 Apr 2014 04:01:57 +0000</lastBuildDate><atom:link href="/categories/pattern-of-the-week/index.xml" rel="self" type="application/rss+xml"/><item><title>Pattern of the Week: Builder</title><link>/2014/04/pattern-of-the-week-builder/</link><pubDate>Mon, 28 Apr 2014 04:01:57 +0000</pubDate><guid>/2014/04/pattern-of-the-week-builder/</guid><description>This post is part of a series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Creational
This week&amp;rsquo;s pattern is called the Builder pattern. The builder pattern is a common way to create an object, using methods and properties to set up exactly the kind of object you want, then calling a Build() method to actually create the object.</description></item><item><title>Pattern of the Week: Prototype</title><link>/2014/03/pattern-of-the-week-prototype/</link><pubDate>Thu, 13 Mar 2014 05:14:30 +0000</pubDate><guid>/2014/03/pattern-of-the-week-prototype/</guid><description>This is the seventh in a series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Creational
This week&amp;rsquo;s pattern is called the Prototype pattern. This pattern is used when you need to create exact copies of objects. Let&amp;rsquo;s look at our example Prototype class:
public class StreetSign { public StreetSign(string shape, string text) { Shape = shape; Text = text; } public string Text { get; private set; } public string Shape { get; private set; } public StreetSign Clone() { return new StreetSign(Shape, Text); } } This StreetSign class has two properties - Text and Shape, and a method called Clone.</description></item><item><title>Pattern of the Week: Proxy</title><link>/2014/03/pattern-of-the-week-proxy/</link><pubDate>Thu, 06 Mar 2014 05:03:57 +0000</pubDate><guid>/2014/03/pattern-of-the-week-proxy/</guid><description>This is the sixth in a series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Structural
This week&amp;rsquo;s pattern is called the Proxy pattern. This pattern is primarily used to add security or to implement caching for objects. For my example, I&amp;rsquo;ll be adding security to this class:
public class SomeService : ISomeService { public List&amp;lt;string&amp;gt; GetStrings() { return new List&amp;lt;string&amp;gt; { &amp;quot;String1&amp;quot;, &amp;quot;String2&amp;quot;, &amp;quot;String3&amp;quot; }; } } This is a pretty simple class, which implements the following interface:</description></item><item><title>Pattern of the Week: Abstract Factory</title><link>/2014/02/pattern-of-the-week-abstract-factory/</link><pubDate>Thu, 27 Feb 2014 04:42:16 +0000</pubDate><guid>/2014/02/pattern-of-the-week-abstract-factory/</guid><description>This is the fifth in a series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Creational
This week&amp;rsquo;s pattern is the Abstract Factory pattern. To explain this, we must first understand the factory class.
Factories create things, plain and simple. Whether we&amp;rsquo;re talking about software development or retail, that is what they do. Factory classes typically look something like this:</description></item><item><title>Pattern of the Week: Template Method</title><link>/2014/02/pattern-of-the-week-template-method/</link><pubDate>Wed, 19 Feb 2014 03:44:58 +0000</pubDate><guid>/2014/02/pattern-of-the-week-template-method/</guid><description>This is the fourth in a series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Behavioral
This week&amp;rsquo;s pattern is the Template Method pattern. This pattern allows you to define a set of algorithms that follow the same procedure, but that might have certain parts that differ. For this pattern, I&amp;rsquo;m borrowing heavily from my post on the Strategy Pattern, so if you haven&amp;rsquo;t read it yet, you should read that one first.</description></item><item><title>Pattern of the Week: Strategy</title><link>/2014/02/pattern-of-the-week-strategy/</link><pubDate>Thu, 13 Feb 2014 03:31:53 +0000</pubDate><guid>/2014/02/pattern-of-the-week-strategy/</guid><description>This is the third in a series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Behavioral
Difficulty: Beginner
This week&amp;rsquo;s pattern is the Strategy pattern. This pattern can be used when you have a set of similar algorithms. The easiest way to explain it is with an example, so let&amp;rsquo;s look at the following class:</description></item><item><title>Pattern of the Week: Decorator</title><link>/2014/02/pattern-of-the-week-decorator/</link><pubDate>Tue, 04 Feb 2014 02:13:46 +0000</pubDate><guid>/2014/02/pattern-of-the-week-decorator/</guid><description>This is the second in a (hopefully) long series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Structural
Difficulty: Beginner
This week&amp;rsquo;s &amp;ldquo;Pattern of the Week&amp;rdquo; is the Decorator pattern. To explain this pattern, I&amp;rsquo;m going to start with an explanation of the Open/Closed Principle. The Open/Closed Principle is one of the five &amp;ldquo;SOLID&amp;rdquo; principles outlined by Robert C.</description></item><item><title>Pattern of the Week: Singleton</title><link>/2014/01/pattern-of-the-week-singleton/</link><pubDate>Sat, 25 Jan 2014 20:58:34 +0000</pubDate><guid>/2014/01/pattern-of-the-week-singleton/</guid><description>This is the first in a (hopefully) long series of &amp;ldquo;Pattern of the Week&amp;rdquo; posts. I&amp;rsquo;m primarily sticking with the Gang of Four patterns, but I may branch off occasionally. Thanks for reading.
Type: Creational
Difficulty: Beginner
Singleton. It is probably the least complicated of all design patterns, yet it can be confusing for beginners. In this post, I will attempt to explain exactly how to create a Singleton, talk about common implementation problems, and provide some sample code so you can see it in action.</description></item></channel></rss>